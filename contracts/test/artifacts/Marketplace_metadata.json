{
	"compiler": {
		"version": "0.8.1+commit.df193b15"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "auctionIndex",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "nftId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "claimedBy",
						"type": "address"
					}
				],
				"name": "NFTClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "auctionIndex",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "nftId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "claimedBy",
						"type": "address"
					}
				],
				"name": "NFTRefunded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "addressNFTCollection",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "addressPaymentToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "nftId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "mintedBy",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "currentBidOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "currentBidPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endAuction",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "bidCount",
						"type": "uint256"
					}
				],
				"name": "NewAuction",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "auctionIndex",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newBid",
						"type": "uint256"
					}
				],
				"name": "NewBidOnAuction",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "auctionIndex",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "nftId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "claimedBy",
						"type": "address"
					}
				],
				"name": "TokensClaimed",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_newBid",
						"type": "uint256"
					}
				],
				"name": "bid",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionIndex",
						"type": "uint256"
					}
				],
				"name": "claimNFT",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionIndex",
						"type": "uint256"
					}
				],
				"name": "claimToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_addressNFTCollection",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_addressPaymentToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_nftId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_initialBid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_endAuction",
						"type": "uint256"
					}
				],
				"name": "createAuction",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionIndex",
						"type": "uint256"
					}
				],
				"name": "getCurrentBid",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionIndex",
						"type": "uint256"
					}
				],
				"name": "getCurrentBidOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "index",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionIndex",
						"type": "uint256"
					}
				],
				"name": "isOpen",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionIndex",
						"type": "uint256"
					}
				],
				"name": "refund",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"bid(uint256,uint256)": {
					"params": {
						"_auctionIndex": "Index of auction",
						"_newBid": "New bid price"
					}
				},
				"claimNFT(uint256)": {
					"params": {
						"_auctionIndex": "Index of auction"
					}
				},
				"claimToken(uint256)": {
					"params": {
						"_auctionIndex": "Index of the auction"
					}
				},
				"createAuction(address,address,uint256,uint256,uint256)": {
					"params": {
						"_addressNFTCollection": "address of the ERC721 NFT collection contract",
						"_addressPaymentToken": "address of the ERC20 payment token contract",
						"_endAuction": "Timestamp with the end date and time of the auction",
						"_initialBid": "Inital bid decided by the creator of the auction",
						"_nftId": "Id of the NFT for sale"
					}
				},
				"getCurrentBid(uint256)": {
					"params": {
						"_auctionIndex": "Index of the auction"
					}
				},
				"getCurrentBidOwner(uint256)": {
					"params": {
						"_auctionIndex": "Index of the auction"
					}
				},
				"isOpen(uint256)": {
					"params": {
						"_auctionIndex": "Index of the auction"
					}
				},
				"refund(uint256)": {
					"params": {
						"_auctionIndex": "Index of the auction"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"bid(uint256,uint256)": {
					"notice": "Place new bid on a specific auction"
				},
				"claimNFT(uint256)": {
					"notice": "Function used by the winner of an auction to withdraw his NFT. When the NFT is withdrawn, the creator of the auction will receive the payment tokens in his wallet"
				},
				"claimToken(uint256)": {
					"notice": "Function used by the creator of an auction to withdraw his tokens when the auction is closed When the Token are withdrawn, the winned of the auction will receive the NFT in his walled"
				},
				"createAuction(address,address,uint256,uint256,uint256)": {
					"notice": "Create a new auction of a specific NFT"
				},
				"getCurrentBid(uint256)": {
					"notice": "Return the current highest bid price for a specific auction"
				},
				"getCurrentBidOwner(uint256)": {
					"notice": "Return the address of the current highest bider for a specific auction"
				},
				"isOpen(uint256)": {
					"notice": "Check if an auction is open"
				},
				"refund(uint256)": {
					"notice": "Function used by the creator of an auction to get his NFT back in case the auction is closed but there is no bider to make the NFT won't stay locked in the contract"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/test/bid.sol": "Marketplace"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de",
			"license": "MIT",
			"urls": [
				"bzz-raw://cbc4803332d45dff58f865ed21c942fe4668e47cc7196c8dfe84102040b1d70f",
				"dweb:/ipfs/QmXhZLsocznRWCSyhjo3vo66Z1VsuuNptAVb6ASPYsWtGx"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990",
			"license": "MIT",
			"urls": [
				"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849",
				"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
			"license": "MIT",
			"urls": [
				"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
				"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
				"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58",
				"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45",
			"license": "MIT",
			"urls": [
				"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30",
				"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"contracts/test/NFTCollection.sol": {
			"keccak256": "0xe81e055721b94aab1d4e04f30129a1ce618602f70d16de11d986a5a1c1b8ded5",
			"license": "MIT",
			"urls": [
				"bzz-raw://633e4c12c8481f429ea681c0874d374a5de0cf382c5ca17d1105e165c7d814e6",
				"dweb:/ipfs/QmQYvMafxsE9VLCtCRPCLmnTrEcY2CyotogUqNJ1nM3duK"
			]
		},
		"contracts/test/bid.sol": {
			"keccak256": "0x8944ad59fb2e42e8c1ef24b786f3806cf68702034b782fe8d3354377ac75c392",
			"urls": [
				"bzz-raw://1ae362736d5e9ee5c4f1cef840efa11500ffbff91fad311511493b445ae0965f",
				"dweb:/ipfs/QmUxRv3BZN686GDTKjunVQDDze9rwo11EdPwxmJB1cUkuj"
			]
		},
		"contracts/test/eRC20T.sol": {
			"keccak256": "0x8c4b66ce2094962e76322a411b239c39405d894e68549ee80f1a4613c49625ab",
			"urls": [
				"bzz-raw://15479851633b12687c7bd52965261781e543d9529ec9d666fcd00a1993a30f73",
				"dweb:/ipfs/QmZTdLeQnjFTzVCefsMcFhg9BT1qtw3HNUDTDEAPZoX5gr"
			]
		},
		"hardhat/console.sol": {
			"keccak256": "0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4",
			"license": "MIT",
			"urls": [
				"bzz-raw://a8cb8681076e765c214e0d51cac989325f6b98e315eaae06ee0cbd5a9f084763",
				"dweb:/ipfs/QmNWGHi4zmjxQTYN3NMGnJd49jBT5dE4bxTdWEaDuJrC6N"
			]
		}
	},
	"version": 1
}